/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Qbf_parser.jj */
/*@egen*//* Qbf_parser.jj
 * Parses a quantified boolean formula in QBF Format 1.0
 * as specified at http://www.qbflib.org/boole.html
 *
 *	<input>		::= <exp> EOF
 *	<exp>		::= <NOT> <exp> | <q_set> <exp> | <LP> <exp> <op> <exp> <RP>
 *				| <LP> <exp> <RP> | <VAR>
 *	<q_set> 	::= <quant> <LSP> <var_list> <RSP>
 *	<quant> 	::= <EXISTS> | <FORALL>
 *	<var_list> 	::= <VAR> <var_list> | <VAR>
 *	<op>		::= <OR> | <AND>
 *	<NOT>		::= "!"
 *	<LP>		::= "("
 *	<RP>		::= ")"
 *	<LSP>		::= "["
 *	<RSP>		::= "]"
 *	<OR>		::= "|"
 *	<AND>		::= "&"
 *	<EXISTS> 	::= "exists"
 *	<FORALL> 	::= "forall"
 *	<VAR>		::= {A sequence of non-special ASCII characters} 
 */

options {
	             
	                         
	// VISITOR = true;
	STATIC = false;
}

PARSER_BEGIN(Qbf_parser)

package main.java.logic.parser;
import java.util.Vector;
import java.util.HashMap;
import java.util.regex.Pattern;
import java.io.*;
import main.java.logic.parser.SimpleNode.NodeType;

public class Qbf_parser implements/*@bgen(jjtree)*/ Qbf_parserTreeConstants, /*@egen*/ Serializable {/*@bgen(jjtree)*/
  protected JJTQbf_parserState jjtree = new JJTQbf_parserState();

/*@egen*/

	private Vector<Integer> eVars = new Vector<Integer>();
	private Vector<Integer> aVars = new Vector<Integer>();
	private Vector<Integer> vars  = new Vector<Integer>();
	private HashMap<Integer, Integer> literalCount  = new HashMap<Integer, Integer>();
	private SimpleNode root;

	public Qbf_parser() {
		jjtree.reset();
	}

	
	public HashMap<Integer, Integer> getLiteralCount() {
		return this.literalCount;
	}

	public Vector<Integer> getEVars() {
		return this.eVars;
	}

	public Vector<Integer> getAVars() {
		return this.aVars;
	}

	public Vector<Integer> getVars() {
		return this.vars;
	}

	public SimpleNode getRootNode() {
		return (SimpleNode)this.jjtree.rootNode();
	}
}

PARSER_END(Qbf_parser)

SKIP : {" "}
SKIP : {"\n" | "\r" | "\r\n" }

// terminals
TOKEN : { < AND		: "&" > }
TOKEN : { < OR		: "|" > }
TOKEN : { < NOT		: "!" > }

TOKEN : { < LP		: "(" > }
TOKEN : { < RP		: ")" > }
TOKEN : { < LSP		: "[" > }
TOKEN : { < RSP		: "]" > }

TOKEN : { < EXISTS	: "exists" > }
TOKEN : { < FORALL	: "forall" > }

TOKEN : { < VAR		: (["a"-"z"])(["0"-"9"])+ > }

// non-terminals
// *	<input>		::= <exp> EOF
void Input()       :	// Node with one child (Exp())
{/*@bgen(jjtree) Input */
  ASTInput jjtn000 = new ASTInput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Input */
        try {
/*@egen*/
	Exp()
	<EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// *	<var_list> 	::= <VAR> <var_list> | <VAR>
//{}
//{
////	Var()
////	|
////	Var()
//}

void And()     :	// Node with two children (Exp(), Exp())
{/*@bgen(jjtree) And */
  ASTAnd jjtn000 = new ASTAnd(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) And */
        try {
/*@egen*/       
	<AND>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { jjtn000.op = "&"; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Or()    :	// Node with two children (Exp(), Exp())
{/*@bgen(jjtree) Or */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Or */
        try {
/*@egen*/
	<OR>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.op = "|"; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Not():	// Node with one child (Exp())
{}
{
 	<NOT>
}
void Exists()      :
{}
{
	<EXISTS> //{ jjtThis.op = "e"; }
}

void Forall()      :
{}
{
	<FORALL> //{ jjtThis.op = "f";}
}

void Var()     :
{/*@bgen(jjtree) Var */
        ASTVar jjtn000 = new ASTVar(JJTVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Var */
        try {
/*@egen*/
	t = <VAR>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	// Stripping down the variable name to a number (e.g. "v123" -> 123 and
		// adding it to a vector containing all variable numbers as well as to a
		// vector with all exist- or allquantified variables (that's the reason
		// for the funny String s fallthrough) 
		String varName = t.image.replaceAll("[a-z]*","");
		int varNumber = Integer.valueOf(varName).intValue();
		varNumber++;
		jjtn000.var = varNumber;
		jjtn000.nodeType = NodeType.VAR;
/*		if (s == "e") {*/
/*			eVars.add(varNumber);*/
/*		}*/
/*		if (s == "f") {*/
/*			aVars.add(varNumber);*/
/*		}*/
/*		if (s == "") {*/
			
			if (literalCount.get(varNumber) != null) {
				literalCount.put(varNumber, literalCount.get(varNumber) + 1);
			}
			else {
				literalCount.put(varNumber, 1);			
			}	
			if (!vars.contains(varNumber)) {
				vars.add(varNumber);
			}
/*		}*/
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VarQ(String s)      :
{/*@bgen(jjtree) VarQ */
        ASTVarQ jjtn000 = new ASTVarQ(JJTVARQ);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) VarQ */
        try {
/*@egen*/
	t = <VAR>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	// Stripping down the variable name to a number (e.g. "v123" -> 123 and
		// adding it to a vector containing all variable numbers as well as to a
		// vector with all exist- or allquantified variables (that's the reason
		// for the funny String s fallthrough) 
		String varName = t.image.replaceAll("[a-z]*","");
		int varNumber = Integer.valueOf(varName).intValue();
		varNumber++;

		if (s == "e") {
			jjtn000.nodeType = NodeType.EXISTS;
			jjtn000.var = varNumber;
			if (!vars.contains(varNumber)) {
				eVars.add(varNumber);
			}
		}
		if (s == "f") {
			jjtn000.nodeType = NodeType.FORALL;
			jjtn000.var = varNumber;
			if (!vars.contains(varNumber)) {
				aVars.add(varNumber);
			}
		} 
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// *	<exp>		::= <NOT> <exp> | <q_set> <exp> | <LP> <exp> <op> <exp> <RP>
// *				| <LP> <exp> <RP> | <VAR>
void Exp()      :
{
	String op = "";
}
{/*@bgen(jjtree) #Logical( 1) */
        {
          ASTLogical jjtn001 = new ASTLogical(JJTLOGICAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		Not() { jjtn001.op = "!"; jjtn001.nodeType = NodeType.NOT; }
		Exp()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/            
	|
	Q_set()
	Exp()
	|
	<LP>/*@bgen(jjtree) #Logical(> 1) */
        {
          ASTLogical jjtn002 = new ASTLogical(JJTLOGICAL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
	(
		Exp()
		(
			(
				"|" {jjtn002.op = "|"; jjtn002.nodeType = NodeType.OR; }
				|
				"&" {jjtn002.op = "&"; jjtn002.nodeType = NodeType.AND; }
			)
			Exp()
		)?
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/               
	<RP>
	|
	Var()
//	|
//	<EOF>
}

// *	<q_set> 	::= <quant> <LSP> <var_list> <RSP>
void Q_set()      :
{
	String s;
}
{
	s = Quant()
	<LSP>
	VarQ(s)
	<RSP>
}

// *	<quant> 	::= <EXISTS> | <FORALL>
String Quant()      :
{}
{
	Exists() { return "e"; }
	|
	Forall() { return "f"; }
}

// *	<op>		::= <OR> | <AND>
void Op()      :
{}
{
	Or()
	|
	And()
}

