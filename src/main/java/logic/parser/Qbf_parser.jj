/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./Qbf_parser.jj */
/*@egen*//* Qbf_parser.jj
 * Parses a quantified boolean formula in QBF Format 1.0
 * as specified at http://www.qbflib.org/boole.html
 *
 *	<input>		::= <exp> EOF
 *	<exp>		::= <NOT> <exp> | <q_set> <exp> | <LP> <exp> <op> <exp> <RP>
 *				| <LP> <exp> <RP> | <VAR>
 *	<q_set> 	::= <quant> <LSP> <var_list> <RSP>
 *	<quant> 	::= <EXISTS> | <FORALL>
 *	<var_list> 	::= <VAR> <var_list> | <VAR>
 *	<op>		::= <OR> | <AND>
 *	<NOT>		::= "!"
 *	<LP>		::= "("
 *	<RP>		::= ")"
 *	<LSP>		::= "["
 *	<RSP>		::= "]"
 *	<OR>		::= "|"
 *	<AND>		::= "&"
 *	<EXISTS> 	::= "exists"
 *	<FORALL> 	::= "forall"
 *	<VAR>		::= {A sequence of non-special ASCII characters} 
 */

options {
	             
	               
	                       
}

PARSER_BEGIN(Qbf_parser)
package main.java.logic.parser;

import java.util.Vector;
import java.util.regex.Pattern;

class Qbf_parser/*@bgen(jjtree)*/implements Qbf_parserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTQbf_parserState jjtree = new JJTQbf_parserState();

/*@egen*/

	private static Vector<Integer> eVars = new Vector<Integer>();
	private static Vector<Integer> aVars = new Vector<Integer>();
	private static Vector<Integer> vars = new Vector<Integer>();

// +---
// | just for testing
// |
	public static void main(String args[]) throws ParseException,TokenMgrError {
		Qbf_parser parser = new Qbf_parser(System.in);
		try {
			ASTStart n = parser.Start();
			Qbf_parserVisitor v = new Qbf_parserDumpVisitor();
			n.jjtAccept(v, null);					
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			System.out.println("Something went wrong while parsing.");
		}		
			System.out.println("vars: "+vars);
			System.out.println("eVars: "+eVars);
			System.out.println("aVars: "+aVars);		
	}
// |
// | end of testing
// +---

	/**
	* getter method for variable numbers
	* @return a Vector<Integer> containing all variable numbers
	*/	
	public Vector<Integer> getVars() {
		return vars;
	}

	/**
	* getter method for all variables bound by an exists-quantifier
	* @return a Vector<Integer> containing variable numbers
	*/	
	public Vector<Integer> getEVars() {
		return eVars;
	}

	/**
	* getter method for all variables bound by an all-quantifier
	* @return a Vector<Integer> containing variable numbers
	*/	
	public Vector<Integer> getAVars() {
		return aVars;
	}
}
PARSER_END(Qbf_parser)

SKIP : {" "}
SKIP : {"\n" | "\r" | "\r\n" }

TOKEN : { < AND		: "&" > }
TOKEN : { < OR		: "|" > }
TOKEN : { < NOT		: "!" > }

TOKEN : { < LP		: "(" > }
TOKEN : { < RP		: ")" > }
TOKEN : { < LSP		: "[" > }
TOKEN : { < RSP		: "]" > }

TOKEN : { < EXISTS	: "exists" > }
TOKEN : { < FORALL	: "forall" > }

TOKEN : { < VAR		: (["a"-"z"])(["0"-"9"])+ > }

ASTStart Start()        :
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Start */
          try {
/*@egen*/
/*DEBUG*/ {System.out.println("Starting parsing.");} /*DEBUG*/ 
	Expression() 
/*DEBUG*/ {System.out.println("Finished parsing. ");} /*DEBUG*/ 
	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

String Quant()        :
{/*@bgen(jjtree) Quant */
  ASTQuant jjtn000 = new ASTQuant(JJTQUANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Quant */
        try {
/*@egen*/
	<FORALL>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return "forall";}
	|
	<EXISTS>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return "exists";}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Op() :
{
}
{
	And()
	|
	Or()
}

void And()         :
{/*@bgen(jjtree) #And( 2) */
  ASTAnd jjtn000 = new ASTAnd(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) #And( 2) */
        try {
/*@egen*/
	<AND>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
          }
        }
/*@egen*/
}

void Or()        :
{/*@bgen(jjtree) #Or( 2) */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) #Or( 2) */
        try {
/*@egen*/
	<OR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
          }
        }
/*@egen*/
}

void Not()      :
{/*@bgen(jjtree) Not */
  ASTNot jjtn000 = new ASTNot(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Not */
        try {
/*@egen*/
	<NOT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expression() :
{
}
{
	Not()
	Expression()
	|
	QSet()
	Expression()
	|
	<LP>
	Expression()
	(
		Op()
		Expression()
	)?
	<RP>
	|
	Var("")
}

void VarList(String s) :
{
	Token t;
}
{
	Var(s)
	(
		VarList(s)
	)?
}

void Var(String s)      :
{/*@bgen(jjtree) Var */
        ASTVar jjtn000 = new ASTVar(JJTVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Var */
        try {
/*@egen*/
	t = <VAR>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	// Stripping down the variable name to a number (e.g. "v123" -> 123 and
		// adding it to a vector containing all variable numbers as well as to a
		// vector with all exist- or allquantified variables (that's the reason
		// for the funny String s fallthrough)
		String varName = t.image.replaceAll("[a-z]*","");
		int varNumber = Integer.valueOf(varName).intValue();
		jjtn000.setId(varNumber);
		vars.add(varNumber);
		if (s == "exists")
			eVars.add(varNumber);
		if (s == "forall")
			aVars.add(varNumber);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void QSet() :
{
	String s;
}
{
	s = Quant()
	<LSP>
	VarList(s)
	<RSP>
}
