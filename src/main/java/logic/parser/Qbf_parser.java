/* Generated By:JJTree&JavaCC: Do not edit this line. Qbf_parser.java */
package main.java.logic.parser;

import java.util.Vector;
import java.util.regex.Pattern;

class Qbf_parser/*@bgen(jjtree)*/implements Qbf_parserTreeConstants, Qbf_parserConstants {/*@bgen(jjtree)*/
  protected static JJTQbf_parserState jjtree = new JJTQbf_parserState();
        private static Vector<Integer> eVars = new Vector<Integer>();
        private static Vector<Integer> aVars = new Vector<Integer>();
        private static Vector<Integer> vars = new Vector<Integer>();

// +---
// | just for testing
// |
        public static void main(String args[]) throws ParseException,TokenMgrError {
                Qbf_parser parser = new Qbf_parser(System.in);
                try {
                        ASTStart n = parser.Start();
                        Qbf_parserVisitor v = new Qbf_parserDumpVisitor();
                        n.jjtAccept(v, null);
                        System.out.println("vars: "+vars);
                        System.out.println("eVars: "+eVars);
                        System.out.println("aVars: "+aVars);

                        System.out.println(printAsQpro(n));
                } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(e.getMessage());
                        System.out.println("Something went wrong while parsing.");
                }
        }

        public static String printAsQpro(ASTStart s) {
                String returnString = "";
                Node n = (Node) s;
                Node current = n;
                int numNodes = n.jjtGetNumChildren();
                int numVars = vars.size();
                int processedNodes = 0;
                int child = 0;
                int i = 0;
                String tmp = "";

                // Header
                returnString += "QBF\n";
                returnString += numVars;
                returnString += "\n";

                // traverse
                if (n.toString().equals("Start")) {
                        current = n.jjtGetChild(child);
                        processedNodes++;
                }


                while (processedNodes < numNodes) {

                        if(current.toString().equals("Quant")) {
                                returnString += "q";

                                while (current.toString().equals("Var") || current.toString().equals("Quant")) {

                                        if (current.toString().equals("Quant") && current.getId() == 0) {
                                                returnString += "\na ";
                                                processedNodes++;
                                        }
                                        if (current.toString().equals("Quant") && current.getId() == 1) {
                                                returnString += "\ne ";
                                                processedNodes++;
                                        }

                                        child++;
                                        current = n.jjtGetChild(child);

                                        while (current.toString().equals("Var")) {
                                                returnString += current.getId() + " ";
                                                processedNodes++;
                                                child++;
                                                current = n.jjtGetChild(child);
                                        }
                                }

                                returnString += "\n/q\n";

                        }

                        if(current.toString().equals("Var")) {
                                returnString += current.getId();
                                returnString += " ";
                                processedNodes++;
                        }

                        if(current.toString().equals("And")) {
                                returnString += "c ";
                                processedNodes++;
                        }

                        if(current.toString().equals("Or")) {
                                returnString += "d ";

                                        current = current.jjtGetChild(0);

                                        while (current.toString().equals("Var")) {
                                                returnString += current.getId() + " ";
                                                processedNodes++;
                                                child++;
                                                current = n.jjtGetChild(child);
                                        }

                                processedNodes++;
                        }

                        if(current.toString().equals("Not")) {
                                processedNodes++;
                        }


                        child++;
                        if (child < numNodes)
                                current = n.jjtGetChild(child);
                }



                // return the QBF in QPro format
                return returnString;
        }
// |
// | end of testing
// +---

        /**
	* getter method for variable numbers
	* @return a Vector<Integer> containing all variable numbers
	*/
        public Vector<Integer> getVars() {
                return vars;
        }

        /**
	* getter method for all variables bound by an exists-quantifier
	* @return a Vector<Integer> containing variable numbers
	*/
        public Vector<Integer> getEVars() {
                return eVars;
        }

        /**
	* getter method for all variables bound by an all-quantifier
	* @return a Vector<Integer> containing variable numbers
	*/
        public Vector<Integer> getAVars() {
                return aVars;
        }

  static final public ASTStart Start() throws ParseException {
 /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
           System.out.println("Starting parsing.");
      Expression();
           System.out.println("Finished parsing. ");
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Quant() throws ParseException {
 /*@bgen(jjtree) Quant */
  ASTQuant jjtn000 = new ASTQuant(JJTQUANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FORALL:
        jj_consume_token(FORALL);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setId(0); {if (true) return "forall";}
        break;
      case EXISTS:
        jj_consume_token(EXISTS);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setId(1); {if (true) return "exists";}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      And();
      break;
    case OR:
      Or();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void And() throws ParseException {
 /*@bgen(jjtree) #And( 2) */
  ASTAnd jjtn000 = new ASTAnd(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AND);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
          }
    }
  }

  static final public void Or() throws ParseException {
 /*@bgen(jjtree) #Or( 2) */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
          }
    }
  }

  static final public void Not() throws ParseException {
 /*@bgen(jjtree) Not */
  ASTNot jjtn000 = new ASTNot(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      Not();
      Expression();
      break;
    case EXISTS:
    case FORALL:
      QSet();
      Expression();
      break;
    case LP:
      jj_consume_token(LP);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        Op();
        Expression();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      break;
    case VAR:
      Var("");
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VarList(String s) throws ParseException {
        Token t;
    Var(s);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      VarList(s);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void Var(String s) throws ParseException {
 /*@bgen(jjtree) Var */
        ASTVar jjtn000 = new ASTVar(JJTVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                // Stripping down the variable name to a number (e.g. "v123" -> 123 and
                // adding it to a vector containing all variable numbers as well as to a
                // vector with all exist- or allquantified variables (that's the reason
                // for the funny String s fallthrough)
                String varName = t.image.replaceAll("[a-z]*","");
                int varNumber = Integer.valueOf(varName).intValue();
                jjtn000.setId(varNumber);
                if (s == "exists")
                        eVars.add(varNumber);
                if (s == "forall")
                        aVars.add(varNumber);
                if (s == "")
                        vars.add(varNumber);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void QSet() throws ParseException {
        String s;
    s = Quant();
    jj_consume_token(LSP);
    VarList(s);
    jj_consume_token(RSP);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Qbf_parserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3000,0x60,0x60,0x7180,0x4000,};
   }

  /** Constructor with InputStream. */
  public Qbf_parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Qbf_parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Qbf_parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Qbf_parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Qbf_parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Qbf_parser(Qbf_parserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Qbf_parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
