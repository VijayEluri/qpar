/* Qbf_parser.jj
 * Parses a quantified boolean formula in QBF Format 1.0
 * as specified at http://www.qbflib.org/boole.html
 *
 *	<input>		::= <exp> EOF
 *	<exp>		::= <NOT> <exp> | <q_set> <exp> | <LP> <exp> <op> <exp> <RP>
 *				| <LP> <exp> <RP> | <VAR>
 *	<q_set> 	::= <quant> <LSP> <var_list> <RSP>
 *	<quant> 	::= <EXISTS> | <FORALL>
 *	<var_list> 	::= <VAR> <var_list> | <VAR>
 *	<op>		::= <OR> | <AND>
 *	<NOT>		::= "!"
 *	<LP>		::= "("
 *	<RP>		::= ")"
 *	<LSP>		::= "["
 *	<RSP>		::= "]"
 *	<OR>		::= "|"
 *	<AND>		::= "&"
 *	<EXISTS> 	::= "exists"
 *	<FORALL> 	::= "forall"
 *	<VAR>		::= {A sequence of non-special ASCII characters} 
 */

options {
	MULTI = true;
	NODE_DEFAULT_VOID = true;
	STATIC = false;
}

PARSER_BEGIN(Qbf_parser)

package main.java.logic.parser;
import java.util.Vector;
import java.util.HashMap;
import java.util.regex.Pattern;
import java.io.*;
import main.java.logic.parser.SimpleNode.NodeType;

public class Qbf_parser implements Serializable {

	private Vector<Integer> eVars = new Vector<Integer>();
	private Vector<Integer> aVars = new Vector<Integer>();
	private Vector<Integer> vars  = new Vector<Integer>();
	private HashMap<Integer, Integer> literalCount  = new HashMap<Integer, Integer>();
	private SimpleNode root;

	public Qbf_parser() {
		jjtree.reset();
	}
	
	public HashMap<Integer, Integer> getLiteralCount() {
		return this.literalCount;
	}

	public Vector<Integer> getEVars() {
		return this.eVars;
	}

	public Vector<Integer> getAVars() {
		return this.aVars;
	}

	public Vector<Integer> getVars() {
		return this.vars;
	}

	public SimpleNode getRootNode() {
		return (SimpleNode)this.jjtree.rootNode();
	}
}

PARSER_END(Qbf_parser)

SKIP : {" "}
SKIP : {"\n" | "\r" | "\r\n" }

// terminals
TOKEN : { < AND		: "&" > }
TOKEN : { < OR		: "|" > }
TOKEN : { < NOT		: "!" > }

TOKEN : { < LP		: "(" > }
TOKEN : { < RP		: ")" > }
TOKEN : { < LSP		: "[" > }
TOKEN : { < RSP		: "]" > }

TOKEN : { < EXISTS	: "exists" > }
TOKEN : { < FORALL	: "forall" > }

TOKEN : { < VAR		: (["a"-"z"])(["0"-"9"])+ > }

// non-terminals
// *	<input>		::= <exp> EOF
void Input() #Input:	// Node with one child (Exp())
{}
{
	Exp()
	<EOF>
}

void And() #And:	// Node with two children (Exp(), Exp())
{}
{       
	<AND> { jjtThis.op = "&"; } 
}

void Or() #Or:	// Node with two children (Exp(), Exp())
{}
{
	<OR> { jjtThis.op = "|"; }
}

void Not():	// Node with one child (Exp())
{}
{
 	<NOT>
}
void Exists() #void:
{}
{
	<EXISTS> //{ jjtThis.op = "e"; }
}

void Forall() #void:
{}
{
	<FORALL> //{ jjtThis.op = "f";}
}

void Var() #Var:
{
	Token t;
}
{
	t = <VAR>
	{	// Stripping down the variable name to a number (e.g. "v123" -> 123 and
		// adding it to a vector containing all variable numbers as well as to a
		// vector with all exist- or allquantified variables (that's the reason
		// for the funny String s fallthrough) 
		String varName = t.image.replaceAll("[a-z]*","");
		int varNumber = Integer.valueOf(varName).intValue();
		varNumber++;
		jjtThis.var = varNumber;
		jjtThis.nodeType = NodeType.VAR;
			
		if (literalCount.get(varNumber) != null) {
			literalCount.put(varNumber, literalCount.get(varNumber) + 1);
		}
		else {
			literalCount.put(varNumber, 1);			
		}	
		if (!vars.contains(varNumber)) {
			vars.add(varNumber);
		}
	}
}

// *	<exp>		::= <NOT> <exp> | <q_set> <exp> | <LP> <exp> <op> <exp> <RP>
// *				| <LP> <exp> <RP> | <VAR>
void Exp() #void:
{
	String s = "";
	String op = "";
	Token t;
}
{
	(
		Not() { jjtThis.op = "!"; jjtThis.nodeType = NodeType.NOT; }
		Exp()
	) #Logical(1)
	|
	(
		(
			s = Quant()
			<LSP>
			t = <VAR>
			(
				{
					String varName = t.image.replaceAll("[a-z]*","");
					int varNumber = Integer.valueOf(varName).intValue();
					varNumber++;

					if (s == "e") {
						jjtThis.nodeType = NodeType.EXISTS;
						jjtThis.var = varNumber;
						if (!vars.contains(varNumber)) {
							eVars.add(varNumber);
						}
					}

					if (s == "f") {
						jjtThis.nodeType = NodeType.FORALL;
						jjtThis.var = varNumber;
						if (!vars.contains(varNumber)) {
							aVars.add(varNumber);
						}
					} 		
				}
			)
			<RSP>
		)
		Exp()
	) #Quantifier(1)
	|
	<LP>
	(
		Exp()
		(
			(
				"|" {jjtThis.op = "|"; jjtThis.nodeType = NodeType.OR; }
				|
				"&" {jjtThis.op = "&"; jjtThis.nodeType = NodeType.AND; }
			)
			Exp()
		)?
	) #Logical(>1)  
	<RP>
	|
	Var()
}

// *	<quant> 	::= <EXISTS> | <FORALL>
String Quant() #void:
{}
{
	Exists() { return "e"; }
	|
	Forall() { return "f"; }
}

// *	<op>		::= <OR> | <AND>
void Op() #void:
{}
{
	Or()
	|
	And()
}

