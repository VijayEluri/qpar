/* Qbf_parser.jj
 * Parses a quantified boolean formula in QBF Format 1.0
 * as specified at http://www.qbflib.org/boole.html
 *
 *	<input>		::= <exp> EOF
 *	<exp>		::= <NOT> <exp> | <q_set> <exp> | <LP> <exp> <op> <exp> <RP>
 *				| <LP> <exp> <RP> | <VAR>
 *	<q_set> 	::= <quant> <LSP> <var_list> <RSP>
 *	<quant> 	::= <EXISTS> | <FORALL>
 *	<var_list> 	::= <VAR> <var_list> | <VAR>
 *	<op>		::= <OR> | <AND>
 *	<NOT>		::= "!"
 *	<LP>		::= "("
 *	<RP>		::= ")"
 *	<LSP>		::= "["
 *	<RSP>		::= "]"
 *	<OR>		::= "|"
 *	<AND>		::= "&"
 *	<EXISTS> 	::= "exists"
 *	<FORALL> 	::= "forall"
 *	<VAR>		::= {A sequence of non-special ASCII characters} 
 */

options {
	MULTI = true;
//	VISITOR = true;
//	NODE_DEFAULT_VOID=true;
}

PARSER_BEGIN(Qbf_parser)

package main.java.logic.parser;
import java.util.Vector;
import java.util.HashMap;
import java.util.regex.Pattern;
import java.io.*;

public class Qbf_parser {

	private static Vector<Integer> eVars = new Vector<Integer>();
	private static Vector<Integer> aVars = new Vector<Integer>();
	private static Vector<Integer> vars  = new Vector<Integer>();
	private static HashMap<Integer, Integer> literalCount  = new HashMap<Integer, Integer>();

	public HashMap<Integer, Integer> getLiteralCount() {
		return literalCount;
	}

	// thomas' wunschkonzert
	// anz variable negiert und nicht negiert
	// 


	public static void main(String[] args) {
		Qbf_parser parser;
		Node root = null;

		try {
			parser = new Qbf_parser(new FileInputStream(args[0]));
		}
		catch (FileNotFoundException e) {
			System.out.println("File not found: " + args[0]);
			return;
		}

		try {
			parser.Input();
			System.out.println("Succesful parse");
			root = parser.jjtree.rootNode(); 

			// Convert internal tree to .qpro format
			String traversedTree = root.traverse();

//			System.out.print(
//				"\nQBF\n" + 
//				vars.size() + 
//				"\nq\n" + 
//				"a "
//			);
//			for (int i=0; i < eVars.size(); i++) System.out.print(eVars.get(i) + " ");
//			System.out.print(
//				"\n" + 
//				"e ");
//				for (int i=0; i < aVars.size(); i++) System.out.print(aVars.get(i) + " "
//			);
//			System.out.println("");
//			System.out.println(
//				traversedTree + 
//				"\nQBF\n"
//			);
//			// Conversion end

			// debug stuff					
			System.out.println("vars: " + vars);
			System.out.println("all-quantified vars: " + aVars);
			System.out.println("exists-quantified vars: " + eVars);
			System.out.println("hashmap: " + literalCount);
			
			
			System.out.println("\n\nTRAVERSED TREE\n\n"+traversedTree+"\n\n\n");
			
			// debug end					
			
			
			
		}
		catch (ParseException e) {
			System.out.println("Parse error");			
			System.out.println(e);
			return;
		}
		catch (TokenMgrError e) {
			System.out.println(e);
			return;
		}

	}
}

PARSER_END(Qbf_parser)

SKIP : {" "}
SKIP : {"\n" | "\r" | "\r\n" }

// terminals
TOKEN : { < AND		: "&" > }
TOKEN : { < OR		: "|" > }
TOKEN : { < NOT		: "!" > }

TOKEN : { < LP		: "(" > }
TOKEN : { < RP		: ")" > }
TOKEN : { < LSP		: "[" > }
TOKEN : { < RSP		: "]" > }

TOKEN : { < EXISTS	: "exists" > }
TOKEN : { < FORALL	: "forall" > }

TOKEN : { < VAR		: (["a"-"z"])(["0"-"9"])+ > }

// non-terminals
// *	<input>		::= <exp> EOF
void Input():	// Node with one child (Exp())
{}
{
	Exp()
	<EOF>
}

// *	<var_list> 	::= <VAR> <var_list> | <VAR>
//void Var_list():
//{}
//{
////	Var()
////	|
////	Var()
//}

void And():	// Node with two children (Exp(), Exp())
{}
{       
	<AND> { jjtThis.op = "&"; } 
}

void Or():	// Node with two children (Exp(), Exp())
{}
{
	<OR> { jjtThis.op = "|"; }
}

void Not():	// Node with one child (Exp())
{}
{
 	<NOT> { jjtThis.op = "!"; }
}
void Exists():
{}
{
	<EXISTS> { jjtThis.op = "e"; }
}

void Forall():
{}
{
	<FORALL> { jjtThis.op = "f";}
}

void Var(String s):
{
	Token t;
}
{
	t = <VAR>
	{	// Stripping down the variable name to a number (e.g. "v123" -> 123 and
		// adding it to a vector containing all variable numbers as well as to a
		// vector with all exist- or allquantified variables (that's the reason
		// for the funny String s fallthrough)
		String varName = t.image.replaceAll("[a-z]*","");
		int varNumber = Integer.valueOf(varName).intValue();
		jjtThis.var = varNumber;
		if (s == "e")
			eVars.add(varNumber);
		if (s == "f")
			aVars.add(varNumber);
		if (s == "") {
			
			if (literalCount.get(varNumber) != null) {
				literalCount.put(varNumber, literalCount.get(varNumber) + 1);
			}
			else {
				literalCount.put(varNumber, 1);			
			}	
			if (!vars.contains(varNumber)) {
				vars.add(varNumber);
			}
		}
	}
}

// *	<exp>		::= <NOT> <exp> | <q_set> <exp> | <LP> <exp> <op> <exp> <RP>
// *				| <LP> <exp> <RP> | <VAR>
void Exp() #void:
{}
{

	Not()
	Exp()
	|
	Q_set()
	Exp()
	|
	<LP>
	Exp()
	(
		Op()
		Exp()
	)?
	<RP>
	|
	Var("")
	|
	<EOF>
}

// *	<q_set> 	::= <quant> <LSP> <var_list> <RSP>
void Q_set() #void:
{
	String s;
}
{
	s = Quant()
	<LSP>
	Var(s)
	<RSP>
}

// *	<quant> 	::= <EXISTS> | <FORALL>
String Quant() #void:
{}
{
	Exists() { return "e"; }
	|
	Forall() { return "f"; }
}

// *	<op>		::= <OR> | <AND>
void Op() #void:
{}
{
	Or() #Or(2)
	|
	And() #And(2)
}

