/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY= */
package main.java.logic.parser;
import java.lang.String;
import java.io.BufferedReader; // dbg
import java.io.InputStreamReader;// dbg
public class SimpleNode implements Node {
	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected Qbf_parser parser;

	public String debugInfo = "";
	public String op = "";
	public int var = -1;	
	
	/**
	* traverse tree goes through all children of a node and builds a String
	* in .qpro format
	* @return A String in qpro format
	*/	
	public String traverse() {
		int i = 0;	
       	Node child;
       	int numChildren;
		String tmp = "";
		String traversedTree = "";
		
		numChildren = this.jjtGetNumChildren();

		if (jjtGetParent() == null) {
			traversedTree += "node has no parent\n";
		} 
		else {
			traversedTree += "node parent = " + jjtGetParent().getClass().getName() + "\n";
		}

		traversedTree += "node (" + this.getClass().getName() + ") has " + numChildren + " children:\n";
		for (i = 0; i < numChildren; i++) {
			traversedTree += "child #" + i + " : " + jjtGetChild(i).getClass().getName() + "(value: " + jjtGetChild(i).var + ") with " + jjtGetChild(i).jjtGetNumChildren() + " children\n";
		}

// 		if (true) return traversedTree; // break
		
		
		if (var == -1) {
			traversedTree += "----------------------------------\n";
			for (i = 0; i < numChildren; i++) {
			traversedTree += "node (" + this.getClass().getName() + ") has " + numChildren + " children:\n";
				traversedTree += this.jjtGetChild(i).traverse();
			}
			traversedTree += "----------------------------------\n";
			return traversedTree;
		}
		else {
			return this.getClass().getName() + " (leaf node): Var: " + var + " #children:" + this.jjtGetNumChildren() + " parent: " + this.jjtGetParent().getClass().getName() + "\n";
		}
	}







  public int getId() {
	return this.id;
  }

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Qbf_parser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }
  
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */
	
  public String toString() { return Qbf_parserTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
  SimpleNode n = (SimpleNode)children[i];
  if (n != null) {
    n.dump(prefix + " ");
  }
      }
    }
  }
}

/* JavaCC - OriginalChecksum=cd6460b90c70fa000dbb49fc278adf1f (do not edit this line) */
