/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY= */
package main.java.logic.parser;
import java.lang.String;

public class SimpleNode implements Node {
	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected Qbf_parser parser;

	public String op = "";
	public int var = -1;	
	public String truthValue = "";
	
	/**
	* assign a truth value to a specific var
	* @param v the var to assign a truth value to
	* @param b the truth value to assign
	*/
	public void setTruthValue(int v, boolean b) {
		int i = 0;
		int numChildren = this.jjtGetNumChildren();
		
		// not in a leaf node, nothing to set
		if (numChildren > 0) {
			for (i = 0; i < numChildren; i++) {
				jjtGetChild(i).setTruthValue(v, b);
			}
		}
		// in a leaf node now
		else {
			if (var == v) {
				if (b) truthValue = "TRUE"; else truthValue = "FALSE";
			}
		}	
	}
	
	/**
	* traverse tree goes through all children of a node and builds a String
	* in .qpro format
	* @return A String in qpro format
	*/	
	public String traverse() {
		int i = 0;	
		String tmp = "";
		String traversedTree = "";
       	Node child;
       	int numChildren = this.jjtGetNumChildren();

		System.out.println(var + ": "+truthValue); // TODO JUST DEBUG INFO
					
		if (numChildren > 0) { // we're not in a leaf node...

			if (op == "|") {
					traversedTree += "d\n";
			}
			else if (op == "&") {
					traversedTree += "c\n";
			}

			for (i = 0; i < numChildren; i++) { // ... so we just traverse through all it's children
				traversedTree += jjtGetChild(i).traverse();
			}

			if (op == "|") {
					traversedTree += "\n/d\n";
			}
			else if (op == "&") {
					traversedTree += "\n/c\n";
			}

		}
		else { // we're in a leaf node...
			if (truthValue == "") {
				// ...but not a truth-assigned one
				traversedTree += var + " ";
			}
		}
		return traversedTree;
	}

	/** 
	* reduces a tree containung truth-assigned variables to a tree without them
	*/
	public void reduceTree() {
		int i = 0;	
       	Node parentNode;
       	Node siblingNode;
       	int numChildren = this.jjtGetNumChildren();

		System.out.println(var + ": "+truthValue); // TODO JUST DEBUG INFO
					
		if (numChildren > 0) { // we're not in a leaf node...
			for (i = 0; i < numChildren; i++) { // ... so we just traverse through all it's children
				jjtGetChild(i).reduceTree();
			}
		}
		else { // we're in a leaf node...
			if (truthValue != "") {
			} else { // we're in a truth-assigned leaf node, let's see what to do
				// false & x = false, so set parent to false and make it a leaf node
				if ((jjtGetParent().op == "&") && (truthValue == "FALSE")) {
					parentNode = jjtGetParent();
				}
				// true & x = x, so delete this node, replace the parent node with
				// the sibling
				if ((jjtGetParent().op == "&") && (truthValue == "TRUE")) {
					parentNode = jjtGetParent();
				}
				// false | x = x, so delete this node, replace the parent node with
				// the sibling
				if ((jjtGetParent().op == "|") && (truthValue == "FALSE")) {
					parentNode = jjtGetParent();
				}
				// true | x = true, so replace the the parent node with true, throw
				// away the sibling
				if ((jjtGetParent().op == "|") && (truthValue == "TRUE")) {
					parentNode = jjtGetParent();
				}
			}
		}
	}

  public int getId() {
	return this.id;
  }

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Qbf_parser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }
  
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */
	
  public String toString() { return Qbf_parserTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
  SimpleNode n = (SimpleNode)children[i];
  if (n != null) {
    n.dump(prefix + " ");
  }
      }
    }
  }
}

/* JavaCC - OriginalChecksum=cd6460b90c70fa000dbb49fc278adf1f (do not edit this line) */
