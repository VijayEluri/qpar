/* Generated By:JJTree: Do not edit this line. Node.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package main.java.logic.parser;

/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

import java.util.Vector;

public interface Node {
	public String 	op = "";
	public String	truthValue = "";
	public int		var = -1;	
	public int		id = 0;
	public boolean	reducable = false;
	public NodeType nodeType = null;
	public enum NodeType {
		START, VAR, FORALL, EXISTS, AND, OR, NOT, TRUE, FALSE
	}

	// custom(ized) methods
	public double getTruthProbability();
	public void		assignTruthValue(int v, boolean b);
	public boolean	checkConnectionToRoot();
	public void		deleteChildren();
	public void		dump(String prefix);
	// public boolean	findNodes(Vector<Integer> v); // replaced by findVar(int v)
	public int		getId();
	public String	getOp();
	public String	getTruthValue();
	public int		getVar();
	public boolean	reduce();
	public boolean	replaceChild(Node oldNode, Node newNode);
	public void		setOp(String o);
	public void		setTruthValue(String t);
	public void		setVar(int v);
	public String	traverse();
	public boolean	findVar(int v);
	public String getEnclosedFormula(String op);
	public Vector<Integer> getPositiveLiterals(String op, Vector<Integer> v);
	public Vector<Integer> getNegativeLiterals(String op, Vector<Integer> v);
  /** This method is called after the node has been made the current
    node.  It indicates that child nodes can now be added to it. */
  public void jjtOpen();

  /** This method is called after all the child nodes have been
    added. */
  public void jjtClose();

  /** This pair of methods are used to inform the node of its
    parent. */
  public void jjtSetParent(Node n);
  public Node jjtGetParent();

  /** This method tells the node to add its argument to the node's
    list of children.  */
  public void jjtAddChild(Node n, int i);

  /** This method returns a child node.  The children are numbered
     from zero, left to right. */
  public Node jjtGetChild(int i);

  /** Return the number of children the node has. */
  public int jjtGetNumChildren();
}/* JavaCC - OriginalChecksum=d0e4097f6955c516c10a7cd4776b0f97 (do not edit this line) */
