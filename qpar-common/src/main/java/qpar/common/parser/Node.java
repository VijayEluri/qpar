/* Generated By:JJTree: Do not edit this line. Node.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package qpar.common.parser;

/* All AST nodes must implement this interface.  It provides basic
 machinery for constructing the parent and child relationships
 between nodes. */

import java.util.HashSet;
import java.util.Set;

public interface Node {

	public enum NodeType {
		START, VAR, FORALL, EXISTS, AND, OR, NOT, TRUE, FALSE, NULL
	}

	// custom(ized) methods
	public double getTruthProbability();

	public boolean checkConnectionToRoot();

	public void deleteChildren();

	public void dump(String prefix);

	public int getId();

	public int getVar();

	public boolean replaceChild(Node oldNode, Node newNode);

	public void setTruthValue(boolean t);

	public void setVar(int v);

	public void setNodeType(NodeType n);

	public NodeType getNodeType();

	public Set<Integer> getPositiveLiterals(NodeType op, Set<Integer> v);

	public Set<Integer> getNegativeLiterals(NodeType op, Set<Integer> v);

	public NodeType getTempNodeType();

	public void setTempNodeType(NodeType nt);

	public int getTempVar();

	public void setTempVar(int v);

	public Node[] getChildren();

	public boolean isStartNode();

	public boolean isVarNode();

	public boolean isForallNode();

	public boolean isExistsNode();

	public boolean isAndNode();

	public boolean isOrNode();

	public boolean isNotNode();

	public boolean isTrueNode();

	public boolean isFalseNode();

	public boolean isTruthNode();

	public boolean isQuantifierNode();

	public boolean getTruth();

	public void save();

	public void restore();

	public void cutOutQuantifierNode();

	public HashSet<Integer> getVariableSet();

	/**
	 * This method is called after the node has been made the current node, it
	 * indicates that child nodes can now be added to it.
	 */
	public void jjtOpen();

	/**
	 * This method is called after all the child nodes have been added.
	 */
	public void jjtClose();

	/**
	 * This pair of methods are used to inform the node of its parent.
	 */
	public void jjtSetParent(Node n);

	public Node jjtGetParent();

	/**
	 * This method tells the node to add its argument to the node's list of
	 * children.
	 */
	public void jjtAddChild(Node n, int i);

	/**
	 * This method returns a child node. The children are numbered from zero,
	 * left to right.
	 */
	public Node jjtGetChild(int i);

	/** Return the number of children the node has. */
	public int jjtGetNumChildren();

}/*
 * JavaCC - OriginalChecksum=d0e4097f6955c516c10a7cd4776b0f97 (do not edit this
 * line)
 */
